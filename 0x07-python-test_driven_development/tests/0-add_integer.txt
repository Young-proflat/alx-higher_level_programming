This module integrate the usage of doctest in testing your function

Usage
=====

``add_integer(...)``` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

::

    >>> add_integer(5, 7)
    12

::

    >>> add_integer(5, -2)
    3

The function also works with floating numbers.

::

    >>> add_integer(3.2, 5.0)
    8

floating numbers and non floating numbers can be combined

::

    >>> add_integer(-3.4, 3)
    0

::

    >>> add_integer(5, 2.0)
    7


:: 

    >>> add_integer(5)
    103

Non-integer(string)

::

    >>> add_integer('wee', 3)
    Traceback (most recent last call):
    TypeError: a must be an integer 

::

    >>> add_integer(4, 'yoo')
    Traceback (most recent last call):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.

::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
